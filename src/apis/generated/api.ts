/**
 * IOTDevBeat API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import axios, { AxiosRequestConfig, AxiosPromise } from 'axios';

//export const defaultBasePath = 'https://localhost'.replace(/\/$/, "");
//export const defaultBasePath = 'https://localhost';
export const defaultBasePath = '';

export class Account {
    'name': string;
    'email': string;
    'password': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Account.attributeTypeMap;
    }
}

export class Action {
    'name': string;
    'type': Action.TypeEnum;
    'properties': string;
    'accountId': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Action.TypeEnum"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "string"
        },
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Action.attributeTypeMap;
    }
}

export namespace Action {
    export enum TypeEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}
export class Connection {
    'name': string;
    'type': Connection.TypeEnum;
    'serverAddress': string;
    'serverPort': number;
    'resourceAddress': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Connection.TypeEnum"
        },
        {
            "name": "serverAddress",
            "baseName": "serverAddress",
            "type": "string"
        },
        {
            "name": "serverPort",
            "baseName": "serverPort",
            "type": "number"
        },
        {
            "name": "resourceAddress",
            "baseName": "resourceAddress",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Connection.attributeTypeMap;
    }
}

export namespace Connection {
    export enum TypeEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}
export class DataField {
    'name': string;
    'deviceId': string;
    'dataType': DataField.DataTypeEnum;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "deviceId",
            "baseName": "deviceId",
            "type": "string"
        },
        {
            "name": "dataType",
            "baseName": "dataType",
            "type": "DataField.DataTypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return DataField.attributeTypeMap;
    }
}

export namespace DataField {
    export enum DataTypeEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}
export class DataValue {
    'fieldID': string;
    'value': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fieldID",
            "baseName": "fieldID",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return DataValue.attributeTypeMap;
    }
}

export class Device {
    'name': string;
    'type': number;
    'connectionId': string;
    'accountId': string;
    'groupId': string;
    'fields': Array<DataField>;
    'widget': DeviceWidget;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string"
        },
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<DataField>"
        },
        {
            "name": "widget",
            "baseName": "widget",
            "type": "DeviceWidget"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Device.attributeTypeMap;
    }
}

export class DeviceWidget {
    'deviceId': string;
    'name': string;
    'type': number;
    'propertise': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deviceId",
            "baseName": "deviceId",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "propertise",
            "baseName": "propertise",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return DeviceWidget.attributeTypeMap;
    }
}

export class ModelPackage {
    'name': string;
    'description': string;
    'packageDefination': string;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "packageDefination",
            "baseName": "packageDefination",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return ModelPackage.attributeTypeMap;
    }
}

export class Subscription {
    'name': string;
    'packageId': string;
    'accountId': string;
    'startDate': Date;
    'endDate': Date;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "packageId",
            "baseName": "packageId",
            "type": "string"
        },
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string"
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "Date"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "Date"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Subscription.attributeTypeMap;
    }
}

export class Trigger {
    'name': string;
    'fieldId': string;
    'deviceId': string;
    'ruleType': Trigger.RuleTypeEnum;
    'value': string;
    'actionId': string;
    'action': Action;
    'accountId': string;
    'status': Trigger.StatusEnum;
    'operator': string;
    'dataField': DataField;
    'device': Device;
    'lastTriggered': Date;
    'id': string;
    'creationDate': Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fieldId",
            "baseName": "fieldId",
            "type": "string"
        },
        {
            "name": "deviceId",
            "baseName": "deviceId",
            "type": "string"
        },
        {
            "name": "ruleType",
            "baseName": "ruleType",
            "type": "Trigger.RuleTypeEnum"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "actionId",
            "baseName": "actionId",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "Action"
        },
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Trigger.StatusEnum"
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string"
        },
        {
            "name": "dataField",
            "baseName": "dataField",
            "type": "DataField"
        },
        {
            "name": "device",
            "baseName": "device",
            "type": "Device"
        },
        {
            "name": "lastTriggered",
            "baseName": "lastTriggered",
            "type": "Date"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return Trigger.attributeTypeMap;
    }
}

export namespace Trigger {
    export enum RuleTypeEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
    export enum StatusEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}

let enumsMap: {[index: string]: any} = {
        "Action.TypeEnum": Action.TypeEnum,
        "Connection.TypeEnum": Connection.TypeEnum,
        "DataField.DataTypeEnum": DataField.DataTypeEnum,
        "Trigger.RuleTypeEnum": Trigger.RuleTypeEnum,
        "Trigger.StatusEnum": Trigger.StatusEnum,
}

let typeMap: {[index: string]: any} = {
    "Account": Account,
    "Action": Action,
    "Connection": Connection,
    "DataField": DataField,
    "DataValue": DataValue,
    "Device": Device,
    "DeviceWidget": DeviceWidget,
    "ModelPackage": ModelPackage,
    "Subscription": Subscription,
    "Trigger": Trigger,
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: AxiosRequestConfig): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (this.location == "query") {
            (<any>requestOptions.params)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        // Do nothing
    }
}

export enum AccountApiApiKeys {
    Bearer
}

export class AccountApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: AccountApiApiKeys, value: string) {
        this.authentications[AccountApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Account/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Account/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Account/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Account, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Account';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Account, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Account/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum ActionApiApiKeys {
}

export class ActionApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: ActionApiApiKeys, value: string) {
        this.authentications[ActionApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param accountId 
     */
    public accountActions (accountId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/account/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling accountActions.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Action, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Action, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param triggerId 
     */
    public triggerAction (triggerId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Action/trigger/{triggerId}'
            .replace('{' + 'triggerId' + '}', String(triggerId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'triggerId' is not null or undefined
        if (triggerId === null || triggerId === undefined) {
            throw new Error('Required parameter triggerId was null or undefined when calling triggerAction.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum AuthApiApiKeys {
    Bearer
}

export class AuthApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: AuthApiApiKeys, value: string) {
        this.authentications[AuthApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     */
    public login (canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Auth/login';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param name 
     * @param email 
     * @param password 
     * @param id 
     * @param creationDate 
     */
    public signUp (name?: string, email?: string, password?: string, id?: string, creationDate?: Date, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Auth/signup';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (name !== undefined) {
            queryParameters['Name'] = name;
        }

        if (email !== undefined) {
            queryParameters['Email'] = email;
        }

        if (password !== undefined) {
            queryParameters['Password'] = password;
        }

        if (id !== undefined) {
            queryParameters['Id'] = id;
        }

        if (creationDate !== undefined) {
            queryParameters['CreationDate'] = creationDate;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum ConnectionApiApiKeys {
}

export class ConnectionApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: ConnectionApiApiKeys, value: string) {
        this.authentications[ConnectionApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Connection/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Connection/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Connection/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Connection, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Connection';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Connection, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Connection/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum DataFieldApiApiKeys {
}

export class DataFieldApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DataFieldApiApiKeys, value: string) {
        this.authentications[DataFieldApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param deviceId 
     */
    public getByDevice (deviceId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField/device/{deviceId}'
            .replace('{' + 'deviceId' + '}', String(deviceId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling getByDevice.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: DataField, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: DataField, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataField/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum DataValueApiApiKeys {
}

export class DataValueApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DataValueApiApiKeys, value: string) {
        this.authentications[DataValueApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param fieldId 
     */
    public getFieldValues (fieldId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/field/{fieldId}'
            .replace('{' + 'fieldId' + '}', String(fieldId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'fieldId' is not null or undefined
        if (fieldId === null || fieldId === undefined) {
            throw new Error('Required parameter fieldId was null or undefined when calling getFieldValues.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param fieldId 
     */
    public getLatestFieldValue (fieldId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/field/{fieldId}/latest'
            .replace('{' + 'fieldId' + '}', String(fieldId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'fieldId' is not null or undefined
        if (fieldId === null || fieldId === undefined) {
            throw new Error('Required parameter fieldId was null or undefined when calling getLatestFieldValue.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: DataValue, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: DataValue, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/DataValue/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum DeviceApiApiKeys {
}

export class DeviceApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DeviceApiApiKeys, value: string) {
        this.authentications[DeviceApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param accountId 
     */
    public getByAccountId (accountId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device/account/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getByAccountId.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Device, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Device, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Device/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum FeedUpdateApiApiKeys {
}

export class FeedUpdateApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: FeedUpdateApiApiKeys, value: string) {
        this.authentications[FeedUpdateApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param deviceId 
     * @param location 
     */
    public updateLocation (deviceId: string, location: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/feed/location/{deviceId}/{location}'
            .replace('{' + 'deviceId' + '}', String(deviceId))
            .replace('{' + 'location' + '}', String(location));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling updateLocation.');
        }

        // verify required parameter 'location' is not null or undefined
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling updateLocation.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param deviceIds 
     * @param status 
     */
    public updateStatus (deviceIds: string, status: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/feed/status/{deviceIds}/{status}'
            .replace('{' + 'deviceIds' + '}', String(deviceIds))
            .replace('{' + 'status' + '}', String(status));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'deviceIds' is not null or undefined
        if (deviceIds === null || deviceIds === undefined) {
            throw new Error('Required parameter deviceIds was null or undefined when calling updateStatus.');
        }

        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateStatus.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum PackageApiApiKeys {
}

export class PackageApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: PackageApiApiKeys, value: string) {
        this.authentications[PackageApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Package/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Package/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Package/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: ModelPackage, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Package';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: ModelPackage, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Package/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum SubscriptionApiApiKeys {
}

export class SubscriptionApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: SubscriptionApiApiKeys, value: string) {
        this.authentications[SubscriptionApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Subscription/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Subscription/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Subscription/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Subscription, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Subscription';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Subscription, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Subscription/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum TriggerApiApiKeys {
}

export class TriggerApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: TriggerApiApiKeys, value: string) {
        this.authentications[TriggerApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param accountId 
     */
    public accountTriggers (accountId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger/account/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling accountTriggers.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: Trigger, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: Trigger, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Trigger/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum WelcomeApiApiKeys {
}

export class WelcomeApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: WelcomeApiApiKeys, value: string) {
        this.authentications[WelcomeApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     */
    public get (canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum WidgetApiApiKeys {
}

export class WidgetApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: WidgetApiApiKeys, value: string) {
        this.authentications[WidgetApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     * @param id 
     */
    public _delete (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Widget/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "DELETE",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param pageNumber 
     * @param pageSize 
     */
    public get (pageNumber: number, pageSize: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Widget/pageNumber&#x3D;{pageNumber}/pageSize&#x3D;{pageSize}'
            .replace('{' + 'pageNumber' + '}', String(pageNumber))
            .replace('{' + 'pageSize' + '}', String(pageSize));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling get.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling get.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param deviceId 
     */
    public getDeviceWidget (deviceId: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/Device/{deviceId}'
            .replace('{' + 'deviceId' + '}', String(deviceId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling getDeviceWidget.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param type 
     */
    public getWidget (type: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/type/{type}'
            .replace('{' + 'type' + '}', String(type));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getWidget.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public get_1 (id: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Widget/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get_1.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "GET",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param value 
     */
    public post (value?: DeviceWidget, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Widget';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "POST",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param value 
     */
    public put (id: string, value?: DeviceWidget, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Widget/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling put.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: "PUT",
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: "json",
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: value,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
